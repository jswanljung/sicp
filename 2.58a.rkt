#lang sicp

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        ((exponentiation? exp) ; Only for powers, not exponentials
         (make-product (make-product (exponent exp) (make-exponentiation (base exp) (make-sum (exponent exp) -1)))
                       (deriv (base exp) var)))
        (else
         (error "unknown expression type -- DERIV" exp))))


(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
;(define (make-sum a1 a2) (list '+ a1 a2))
;(define (make-product m1 m2) (list '* m1 m2))
(define (sum? x)
  (and (pair? x) (inlist? '+ x)))
(define (addend s) (before '+ s))
;(define (augend s) (caddr s))
(define (product? x)
  
  (and (pair? x) (not (sum? x)) (inlist? '* x)))
(define (multiplier p) (before '* p))
;(define (multiplicand p) (caddr p))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (append
               (if (pair? a1) a1 (list a1))
               (list '+)
               (if (pair? a2) a2 (list a2))))))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

; 2.56 Implement power rule.
(define (exponentiation? x)
  (and (pair? x) (not (sum? x)) (not (product? x)) (inlist? '** x)))
(define (base x)
  (car x))
(define (exponent x)
  (caddr x))
(define (make-exponentiation b e)
  (cond ((or (=number? b 1) (=number? e 0)) 1)
        ((=number? b 0) 0)
        ((=number? e 1) b)
        ((and (number? b) (number? e)) (expt b e))
        (else (list b '** e))))

(define (augend s)
  (after '+ s))

(define (multiplicand s)
  (after '* s))

(define (inlist? x seq)
  (cond ((null? seq) false)
        ((eq? x (car seq)) true)
        (else (inlist? x (cdr seq)))))
(define (before x seq)
  (define (left leftpart seq)
    (cond ((null? seq) '())
          ((eq? x (car seq))
           (if (null? (cdr leftpart))
               (car leftpart)
               leftpart))
          (else (left (append leftpart (list (car seq))) (cdr seq)))))
  (left '() seq))
(define (after x seq)
  (cond ((null? seq) '())
        ((eq? x (car seq))
         (if (null? (cddr seq))
             (cadr seq)
             (cdr seq)))
        (else (after x (cdr seq)))))