#lang racket

(define *op-table* (make-hash))

(define (put op type proc)
  (hash-set! *op-table* (list op type) proc))

(define (get op type)
  (hash-ref *op-table* (list op type) '()))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp)
                                           var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (make-sum a b)
  (cond ((and (number? a) (= a 0)) b)
        ((and (number? b) (= b 0)) a)
        (else (list '+ a b))))
(define (addend args)
  (car args))
(define (augend args)
  (cadr args))

(define (install-sum)
  (define (d args var)
    (make-sum (deriv (addend args) var)
              (deriv (augend args) var)))
  (put 'deriv '+ d))

(define (multiplicand args)
  (cadr args))
(define (multiplier args)
  (car args))
(define (make-product a b)
  (cond ((or (and (number? a) (= a 0)) (and (number? b) (= b 0))) 0)
        ((and (number? a) (= a 1)) b)
        ((and (number? b) (= b 1)) a)
        (else (list '* a b))))

(define (install-product)
  (define (d args var)
    (make-sum (make-product (deriv (multiplier args) var) (multiplicand args))
              (make-product (multiplier args) (deriv (multiplicand args) var))))
  (put 'deriv '* d))

(define (make-exponent a b)
  (cond ((and (number? a) (= a 1)) 1)
        ((and (number? b) (= b 0)) 1)
        ((and (number? b) (= b 1)) a)
        (else (list '** a b))))
(define (base args)
  (car args))
(define (exponent args)
  (cadr args))
(define (install-expt)
  (define (d args var)
    (make-product (make-product (exponent args)
                                (make-exponent (base args)
                                               (- (exponent args) 1)))
                  (deriv (base args) var)))
  (put 'deriv '** d))
(install-expt)
(install-sum)
(install-product)

(define expression1 '(** (* x y) 2))
(deriv expression1 'x)
