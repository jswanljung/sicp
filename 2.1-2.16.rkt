#lang racket
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

#; (define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
; improved version, further improved in 2.1
#; (define (make-rat n d)
    (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))

; 2.1
(define (make-rat n d)
  (let ((an (abs n))
    (ad (abs d))
    (sign (if (< (* n d) 0) -1 1)))
  (let ((g (gcd an ad)))
    (cons (* sign (/ an g)) (/ ad g)))))

(define one-half (make-rat 1 2))
(print-rat one-half)
(define one-third (make-rat 1 3))
(print-rat (add-rat one-half one-third))
(print-rat (mul-rat one-half one-third))
(print-rat (add-rat one-third one-third))
(define test-rat (make-rat 4 -6))
(print-rat test-rat)

; 2.2

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (make-point x y)
  (cons x y))
(define (x-point p)
    (car p))
(define (y-point p)
    (cdr p))
(define (make-segment p1 p2)
    (cons p1 p2))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (average a b) (/ (+ a b) 2))
(define (midpoint-segment s) 
  (let (( x1 (x-point (start-segment s)))
    (y1 (y-point (start-segment s)))
    (x2 (x-point (end-segment s)))
    (y2 (y-point (end-segment s))))
    (make-point (average x1 x2) (average y1 y2))))

(define mysegment (make-segment (make-point 3.0 2) (make-point -8 -1.0)))
(print-point (midpoint-segment mysegment))

