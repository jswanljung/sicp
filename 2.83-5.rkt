#lang racket
(define *op-table* (make-hash))
(define (put op type proc)
  (hash-set! *op-table* (list op type) proc))
(define (get op type)
  (hash-ref *op-table* (list op type) '()))

(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (cond
    [(number? datum) 'real]
    [(pair? datum) (car datum)]
    [else (error "Bad tagged datum -- TYPE-TAG" datum)]))
(define (contents datum)
  (cond
    [(number? datum) datum]
    [(pair? datum) (cdr datum)]
    [else (error "Bad tagged datum -- CONTENTS" datum)]))
(define (drop x)
  (if (droppable? x)
      (drop (project x))
      x))
(define (droppable? x)
  (if (boolean? x) #f
      (and (can-project? x) (equ? x (raise (project x))))))

  (define (closest-rational x)
    (define max-denominator 100)
    (define margin (/ 1 max-denominator))
    (define intpart (exact-floor x))
    (define v (- x intpart))
    (define (closest-iter a b c d)
      (let ([e (+ a c)] [f (+ b d)])
        (cond
          [(> f max-denominator) (if (< (- v (/ a b)) (- (/ c d) v)) (cons a b) (cons c d))]
          [(< (abs (- (/ e f) v)) margin) (cons e f)]
          [(< (/ e f) v) (closest-iter e f c d)]
          [else (closest-iter a b e f)])))
    (if (< v margin)
        (make-rational intpart 1)
        (let ([fracpart (closest-iter 0 1 1 1)])
          (make-rational (+ (* intpart (cdr fracpart)) (car fracpart)) (cdr fracpart)))))
(define (install-real-package)
  (define (tag x)
    x)
  (put 'add '(real real) (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real) (lambda (x y) (tag (- x y))))
  (put 'mul '(real real) (lambda (x y) (tag (* x y))))
  (put 'div '(real real) (lambda (x y) (tag (/ x y))))

  (put 'make 'real (lambda (x) (tag (exact->inexact x))))
  (put 'equ? '(real real) (lambda (x y) (= x y)))
  (put 'exp '(real real) (lambda (x y) (tag (expt x y))))
  (put 'raise 'real (lambda (x) (make-complex-from-real-imag (tag x) 0)))
  (put 'project 'real (lambda (x) (closest-rational x)))
  'done)

(define (install-integer-package)
  (define (tag x)
    (attach-tag 'integer x))
  (put 'add '(integer integer) (lambda (x y) (tag (+ x y))))
  (put 'sub '(integer integer) (lambda (x y) (tag (- x y))))
  (put 'mul '(integer integer) (lambda (x y) (tag (* x y))))
  (put 'div '(integer integer) (lambda (x y) (tag (/ x y))))
  (put 'make 'integer (lambda (x) (tag (exact-floor x))))
  (put 'equ? '(integer integer) (lambda (x y) (= x y)))
  (put 'exp '(integer integer) (lambda (x y) (tag (expt x y))))
  (put 'raise 'integer (lambda (x) (make-rational x 1)))
  'done)

(define (install-rational-package)
    ;; internal procedures
  (define (numer x)
    (car x))
  (define (denom x)
    (cdr x))
  (define (make-rat n d)
    (let ([g (gcd n d)]) (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y)) (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y)) (* (denom x) (numer y))))
  ;; interface to rest of the system
  (define (tag x)
    (attach-tag 'rational x))
  (define (equ? x y)
    (and (= (numer x) (numer y)) (= (denom x) (denom y))))
  (define (=zero? x)
    (= (numer x) 0))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational) equ?)
  (put '=zero? '(rational) =zero?)
  (put 'make 'rational (lambda (n d) (tag (make-rat (exact-floor n) (exact-floor d)))))
  (put 'raise 'rational (lambda (n) (make-real (/ (numer n) (denom n)))))
  (put 'project 'rational (lambda (n) (make-integer (numer n))))
  'done)
(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z)
    (car z))
  (define (imag-part z)
    (cdr z))
  (define (make-from-real-imag x y)
    (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z)) (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))
  ;; interface to the rest of the system
  (define (tag x)
    (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (install-polar-package)
  ;; internal procedures
  (define (magnitude z)
    (car z))
  (define (angle z)
    (cdr z))
  (define (make-from-mag-ang r a)
    (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y))) (atan y x)))
  ;; interface to the rest of the system
  (define (tag x)
    (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2)) (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2)) (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2)) (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2)) (- (angle z1) (angle z2))))
  ;; interface to rest of the system
  (define (tag z)
    (attach-tag 'complex z))
  (define (equ? z1 z2)
    (and (= (real-part z1) (real-part z2)) (= (imag-part z1) (imag-part z2))))
  (define (=zero? z)
    (= (magnitude z) 0))
  (put 'add '(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'equ? '(complex complex) equ?)
  (put '=zero? '(complex) =zero?)
  (put 'project 'complex (lambda (z) (make-real (real-part z))))
  'done)

(define (apply-generic op . args)
  ; reduce the type-tag list to remove duplicates
  ; check that it isn't just one element because then there's nothing to do.
  ; for each type check if the others can be coerced to it
  (define (tower-level x)
    (define (is-top? x)
      (null? (get 'raise (type-tag x))))
    (define (next-level x levels-so-far)
      (if (is-top? x) levels-so-far (next-level (raise x) (+ levels-so-far 1))))
    (next-level x 0)) ; counting from the top
  (define (multi-raise x n)
    (if (= 0 n) x (multi-raise (raise x) (- n 1))))
  (define (raise-args-to-common-level args)
    (let ([levels (map tower-level args)])
      (map multi-raise args (map (lambda (level) (- level (apply min levels))) levels))))
  (define (unique ulist)
    (define (unique-iter from to)
      (if (null? from)
          to
          (unique-iter (cdr from) (if (memq (car from) to) to (append to (list (car from)))))))
    (unique-iter ulist '()))
  (define (alleq? list-of-symbols)
    (if (null? (cdr list-of-symbols))
        #t
        (and (eq? (car list-of-symbols) (cadr list-of-symbols)) (alleq? (cdr list-of-symbols)))))
  (let ([type-tags (map type-tag args)])
    (define (no-match-error)
      (error "No method for these types" (list op type-tags)))
    (let ([proc (get op type-tags)])
      (if (not (null? proc))
          (apply proc (map contents args))
          (if (alleq? type-tags)
              (no-match-error)
              (let ((result (apply apply-generic op (raise-args-to-common-level args))))
                (if (boolean? result) result (drop result))))))))

(define (real-part z)
  (apply-generic 'real-part z))
(define (imag-part z)
  (apply-generic 'imag-part z))
(define (magnitude z)
  (apply-generic 'magnitude z))
(define (angle z)
  (apply-generic 'angle z))
(define (can-raise? x)
  (not (null? (get 'raise (type-tag x)))))
(define (raise x)
  ((get 'raise (type-tag x)) (contents x)))
(define (add x y)
  (apply-generic 'add x y))
(define (sub x y)
  (apply-generic 'sub x y))
(define (mul x y)
  (apply-generic 'mul x y))
(define (div x y)
  (apply-generic 'div x y))
(define (equ? x y)
  (apply-generic 'equ? x y))
(define (=zero? x)
  (apply-generic '=zero? x))
(define (can-project? x)
  (not (null? (get 'project (type-tag x)))))
(define (project x)
  ((get 'project (type-tag x)) (contents x)))

(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))
(define (make-integer n)
  ((get 'make 'integer) n))
(define (make-real n)
  ((get 'make 'real) n))
(define (make-rational n d)
  ((get 'make 'rational) n d))
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
(define (square x)
  (* x x))

(install-polar-package)
(install-rectangular-package)
(install-complex-package)
(install-rational-package)
(install-real-package)
(install-integer-package)

(add (make-integer 3) (make-integer 4))
(define z (make-complex-from-real-imag 3 4))
;(magnitude z)
;(equ? 3 4)
;(equ? (make-rational 2 3) (make-rational 4 6))
;(equ? (make-rectangular 2 3) (make-rectangular 2 3))
;(equ? (make-rectangular 1 0) (make-polar 1 0))

;(add 3 z)
(define z2 (make-complex-from-real-imag 2 -4))
(add z z2)
